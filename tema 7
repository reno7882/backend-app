/* eslint-disable */

// Tema 7: Seguridad y pruebas en Node.js
// -- Agregar la validacion para el owner
// üõ°Ô∏è Ownership check
if (service.creadoPor.toString() !== req.user.userId && req.user.role !== 'superadmin') {
    return res.status(403).json({ message: 'No tienes permiso para modificar este servicio' })

    // üõ°Ô∏è Ownership check seguro
    const creadoPorId = service.creadoPor ? service.creadoPor.toString() : null
    if (creadoPorId !== req.user.userId && req.user.role !== 'superadmin') {
        return res.status(403).json({ message: 'No tienes permiso para eliminar este servicio' })
    }

}

//     --Variables de entorno dev, test, prod
//     --Pruebas unitarias y de integraci√≥n(Jest + Supertest)
//     1. Instala las dependencias necesarias
// 	npm install--save - dev jest supertest
//     1. Instala las dependencias necesarias
//     bash
//     CopiarEditar
// npm install--save - dev jest supertest
//     Adem√°s, agrega en tu package.json el script para correr las pruebas:
//     json
//     CopiarEditar
"scripts": {
    "test": "jest"
}

//     2. Configura Jest(opcional, si quieres)
// En la ra√≠z crea un archivo jest.config.js para que Jest entienda que vas a probar c√≥digo Node.js:

module.exports = {
    testEnvironment: 'node'
}

    //     3. Estructura de prueba
    // Crea una carpeta tests o __tests__ en la ra√≠z o dentro de src /.
    // Por ejemplo:

    / src
    / controllers
    / routes
    / tests
auth.test.js
service.test.js

// 4. Ejemplo b√°sico de prueba de integraci√≥n para autenticaci√≥n(auth.test.js)

const request = require('supertest')
const app = require('../src/app') // Ajusta la ruta si es diferente

describe('Auth Endpoints', () => {
    it('Debe registrar un usuario correctamente', async () => {
        const res = await request(app)
            .post('/api/auth/register')
            .send({
                email: 'testuser@example.com',
                password: 'password123'
            })
        expect(res.statusCode).toEqual(201)
        expect(res.body).toHaveProperty('token')
    })

    it('Debe fallar registro con email incompleto', async () => {
        const res = await request(app)
            .post('/api/auth/register')
            .send({
                email: '',
                password: 'password123'
            })
        expect(res.statusCode).toEqual(400)
        expect(res.body).toHaveProperty('errors')
    })

    it('Debe loguear un usuario con credenciales correctas', async () => {
        const res = await request(app)
            .post('/api/auth/login')
            .send({
                email: 'testuser@example.com',
                password: 'password123'
            })
        expect(res.statusCode).toEqual(200)
        expect(res.body).toHaveProperty('token')
    })
})
//     Nota: Para que esta prueba funcione, tu base de datos debe estar conectada y tu servidor configurado para entorno de pruebas o usar una base distinta(puedes usar mongodb - memory - server para pruebas en memoria).

// 5. Ejemplo b√°sico de prueba unitaria para controlador(service.test.js)
// Si quieres probar l√≥gica aislada(sin servidor) puedes hacer mocks y probar funciones:

const serviceController = require('../src/controllers/service.controller')
const Service = require('../src/models/Service')

jest.mock('../src/models/Service')

describe('Service Controller', () => {
    afterEach(() => {
        jest.clearAllMocks()
    })

    test('createService - debe crear servicio', async () => {
        const req = {
            body: { nombre: 'Test', precio: 100 },
            user: { userId: '123' }
        }
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        }
        Service.prototype.save = jest.fn().mockResolvedValue(req.body)

        await serviceController.createService(req, res)

        expect(res.status).toHaveBeenCalledWith(201)
        expect(res.json).toHaveBeenCalledWith(req.body)
    })
})

// 6. C√≥mo ejecutar las pruebas
// Solo ejecuta:

npm test

// ¬°Claro! Lo mejor para pruebas de integraci√≥n en MongoDB es usar mongodb - memory - server, que levanta una base de datos MongoDB en memoria, r√°pida, sin afectar tu base real.
// Te dejo paso a paso c√≥mo configurar tu entorno de pruebas con jest + supertest + mongodb - memory - server para que uses una base de datos en memoria solo durante las pruebas.

// 1. Instalar dependencias necesarias

npm install--save - dev mongodb - memory - server @types/jest
// Si usas TypeScript, el paquete @types/jest ayuda con los tipos. Si no, solo el mongodb-memory-server est√° bien.

// 2. Crear un archivo para la configuraci√≥n global de la base de datos para tests
// Por ejemplo, crea en la ra√≠z / tests / setup.js(o setup.test.js):

const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')

let mongoServer

module.exports.connect = async () => {
    mongoServer = await MongoMemoryServer.create()
    const uri = mongoServer.getUri()
    await mongoose.connect(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
}

module.exports.closeDatabase = async () => {
    await mongoose.connection.dropDatabase()
    await mongoose.connection.close()
    await mongoServer.stop()
}

module.exports.clearDatabase = async () => {
    const collections = mongoose.connection.collections
    for (const key in collections) {
        const collection = collections[key]
        await collection.deleteMany()
    }
}

// 3. Configurar Jest para usar esa configuraci√≥n
// En package.json, agrega o crea un archivo jest.config.js y ponle esto:

module.exports = {
    testEnvironment: 'node',
    setupFilesAfterEnv: ['./tests/jest.setup.js'],
}
// Y crea un archivo / tests / jest.setup.js:

const db = require('./setup')

beforeAll(async () => {
    await db.connect()
})

afterEach(async () => {
    await db.clearDatabase()
})

afterAll(async () => {
    await db.closeDatabase()
})

// 4. Ahora tus tests usar√°n esa base de datos en memoria
// Ejemplo de test con supertest en / tests / auth.test.js:

const request = require('supertest')
const app = require('../src/app')

describe('Auth endpoints', () => {
    it('debe registrar usuario', async () => {
        const res = await request(app)
            .post('/api/auth/register')
            .send({
                email: 'test@example.com',
                password: 'password123'
            })
        expect(res.statusCode).toBe(201)
        expect(res.body).toHaveProperty('token')
    })
})
// Cuando corras npm test Jest levantar√° la base de datos en memoria, correr√° las pruebas y luego la limpiar√° y cerrar√°.

// 5. Opcional: Configurar variables de entorno para distinguir entornos
// Por ejemplo, en tus archivos.env, .env.test(o como uses variables de entorno):
// Para test usas algo como:

MONGO_URI = mongodb://localhost/test-db
NODE_ENV = test
// Pero con mongodb - memory - server no necesitas conectarte a la real, ya que el c√≥digo de test conecta a la memoria.

